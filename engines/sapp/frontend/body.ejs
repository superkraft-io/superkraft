<script src="<%= sk.routes.frontend.engine %>/frontend/websockets-callback/lib/wscb.js"></script>

<script type="module">
    class SK_SAPP_FE_Initializer {
        constructor(){
        }

        async init(){
            await this.configRequire()
            await this.configDirname()
            await this.configExtensions()
            await this.configApp()
            await this.configWSCB()
        }

        async configRequire(){
            var module = await import('socket:module')

            var createRequire = module.createRequire
            window.__require = createRequire(import.meta.url)

            window.require = path => {
                try {
                    var res = __require(path)
                } catch(err) {
                    try {
                        var res = __require('socket:' + path)
                    } catch(err) {
                        console.error('COULD NOT LOAD MODULE ' + path)
                        
                        var res = __require('/libs/modules/placeholder_class.js')
                    }
                }

                return res
            }

        }

        configDirname(){
            Object.defineProperty(window, '__dirname', {
                enumerable: true,
                configurable: true,
                get: function() {
                return require('socket:path').dirname(import.meta.url)//.split('\\').join('/').replace('socket://com.dapp.socket', '')
                }
            })
        }

        async configApp(){
            window.ssc_app = await import('socket:application')
            sk.ssc = {
                currentWindow: await ssc_app.getCurrentWindow()
            }

            window.ssc_currentWindow = sk.ssc.currentWindow
        }

        async configWSCB(){
            await sk.utils.awaitSomething(()=>{
                if (window.WebSockets_Callback) return true
            })

            window.wscb = new WebSockets_Callback({asSSC: true, asClient: true})
        }

        async configExtensions(){
            window.extensions = await import('socket:extension')
            console.log(extensions)


            sk.extensions = {}
            <% for (var i = 0; i < sk.extensions.length; i++) { %>
                sk.extensions.<%- sk.extensions[i] %> = await window.extensions.load('<%- sk.extensions[i] %>')
            <% } %>




            var configExtension = extension => {
                extension.call = async (cmd, data, responseType)=>{
                    var _data = data
                    var res = await extension.binding[cmd](_data, (!responseType ? undefined : {responseType: responseType}))
                    return res.data
                }
            }

            for (var i in sk.extensions){
                var extension = sk.extensions[i]
                configExtension(extension)
            }
        }
    }


    sk.engineInitFunc = async ()=>{
        sk.sapp = new SK_SAPP_FE_Initializer()
        await sk.sapp.init()
    }
    
</script>