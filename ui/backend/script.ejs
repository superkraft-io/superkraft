<script>
    sk = {
        app_type: "<%= app_type %>",
        isOnMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), 

        paths: {
            app: '<%= sk.routes.frontend.app %>',
            view: '<%= sk.routes.frontend.view %>',
            global: '<%= sk.routes.frontend.global %>',
            icon: '<%= sk.routes.icon %>',
        },

        id: '<%= id %>',
        title: '<%= title %>',

        actions: {},

        comm: new SK_Comm(),
        dialog: new SK_Dialog(),

        //_cM: new ContextMenu(),

        toast: {
            do: (_msg, _class, _position)=>{
                $('body').toast({message: _msg, class: _class, position: _position || 'top center'})
            },

            success : msg => { sk.toast.do(msg, 'success') },
            error   : msg => { sk.toast.do(msg, 'error')   },
            warning : msg => { sk.toast.do(msg, 'warning') }
        },

        openURL: url => { sk.comm.main('openURL', {url: url}) },

        init: ()=>{
            return new Promise(async (resolve, reject)=>{
                var res = await sk.comm.main('getInfo')
                sk.os      = res.os
                sk.main    = res.main
                sk.noTitle = res.view.noTitle
                sk.version = res.version
                sk.window  = {...sk.window, ...res.view}


                /*************/

                var configureActions = actions => {
                    var configAction = action => {
                        sk.actions[action] = opt => { return sk.comm.view(action, opt) }
                    }

                    for (var i in actions) configAction(actions[i])
                }

                configureActions(res.actions)


                resolve()
            })
        },

        debugMode: activate => {
            var rndClr = ()=>{
                return '#' + [..."000000"].map(()=>Math.random().toString(16)[2]).join("")
            }

            function traverseChildren(component){
                var clr = rndClr()
                var id = 'sk_ui_id_' + component.uuid
                $('.' + id).css('border', (activate ? 'dashed 1px darkturquoise' : ''))

                for (var i = 0; i < component.children.length; i++){
                    traverseChildren(component.children[i])
                }
            }
            traverseChildren(sk.app.body)
            
        },

        utils: {
            sleep: (delay = 1000)=>{ return new Promise(resolve => { setTimeout(()=>{ resolve() }, delay)})},
            rgb2hex: rgb => {
                try {
                    return `#${
                    rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/)
                    .slice(1)
                    .map(n => 
                        parseInt(n, 10)
                        .toString(16)
                        .padStart(2, '0'))
                        .join('')
                    }`
                } catch(err) { return }
            },

            formatSeconds: seconds => {
                var _s = seconds
                var timeUnit = (_s > 1 ? sk.l10n.getPhrase('seconds') : sk.l10n.getPhrase('second') )

                if (_s > 60){
                    _s = _s / 60
                    timeUnit = (_s > 1 ? sk.l10n.getPhrase('minutes') : sk.l10n.getPhrase('minute') )
                }
                
                var hourUnit = false
                if (_s > 60){
                    _s = _s / 60
                    timeUnit = (_s > 1 ? sk.l10n.getPhrase('hours') : sk.l10n.getPhrase('hour') )
                    hourUnit = true
                }
                

                return {
                    long: _s + ' ' + timeUnit,
                    short: _s + ' ' + (hourUnit ? timeUnit : timeUnit.substr(0,3))
                }
            },

            humanReadableDuration: msDuration => {
                const h = Math.floor(msDuration / 1000 / 60 / 60);
                const m = Math.floor((msDuration / 1000 / 60 / 60 - h) * 60);
                const s = Math.floor(((msDuration / 1000 / 60 / 60 - h) * 60 - m) * 60);

                // To get time format 00:00:00
                const seconds = s < 10 ? `0${s}` : `${s}`;
                const minutes = m < 10 ? `0${m}` : `${m}`;
                const hours = h < 10 ? `0${h}` : `${h}`;

                return `${h} ${window.l10n.engine.getPhrase(157).toLowerCase()}`// ${minutes}m ${seconds}s`;
            },

            bytesToFormat(size){
                var formatsList = []
                var highest = {size: size, format: 'B'}

                var addFormat = (size, format)=>{
                    highest = {size: size, format: format.toUpperCase() + 'B'}
                    formatsList.push(highest)
                }

                

                var formats = 'kmgtp'
                var divisionIdx = -1
                var divide = ()=>{
                    divisionIdx++
                    size = (size / 1000).toFixed(2)
                    addFormat(size, formats[divisionIdx])
                }

                var sizeStr = size.toString()
                var divisionSteps = Math.floor(sizeStr.length / 3)
                for (var i = 0; i < divisionSteps; i++) divide()

                var res = {size: highest.size, format: highest.format, formats: formatsList}

                return res
            }
        },

        

        _view: SK_App_View
    }

    sk.fileDrop = new sk_fileDrop()

    sk.window = {
        close    : terminate => { sk.comm.main('windowAction', {action: 'close', terminate: terminate}) },
        minimize : ()=>{ sk.comm.main('windowAction', {action: 'minimize'}) },
        maximize : reset => {
            sk.window.resizing = true
            sk.comm.main('windowAction', {action: 'maximize', reset: reset})
            setTimeout(()=>{ sk.window.resizing = false }, 100)
        },
    }

    sk.ui = {
        components: {
            uuid_counter: 0,

            lists: {
                core: {
                    <% for (var i = 0; i < sk.ui.components.core.length; i++){ %>
                        <%= sk.ui.components.core[i] %>: sk_ui_<%= sk.ui.components.core[i] %>,
                    <% } %>
                },

                shared: {
                    <% for (var i = 0; i < sk.ui.components.shared.length; i++){ %>
                        <%= sk.ui.components.shared[i] %>: sk_ui_<%= sk.ui.components.shared[i] %>,
                    <% } %>
                },

                view: {
                    <% for (var i = 0; i < sk.ui.components.view.length; i++){ %>
                        <%= sk.ui.components.view[i] %>: sk_ui_<%= sk.ui.components.view[i] %>,
                    <% } %>
                },

                global: {
                    <% for (var i = 0; i < sk.ui.components.global.length; i++){ %>
                        <%= sk.ui.components.global[i] %>: sk_ui_<%= sk.ui.components.global[i] %>,
                    <% } %>
                }
            }
        }
    }

    <% if (app_type === 'dapp'){ %>
        sk.views = {
            <% for (var i = 0; i < views.length; i++){ %>
                <%= views[i] %>: new SK_ViewController({view: '<%= views[i] %>'}),
            <% } %>
        }
    <% } %>
    
</script>