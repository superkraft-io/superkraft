<script>
    sk = {
        app_type: "<%= app_type %>",
        isOnMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), 
        browser: ()=>{
            let userAgent = navigator.userAgent;
            let browserName = undefined
            if(userAgent.match(/chrome|chromium|crios/i)){
                browserName = "chrome";
            }else if(userAgent.match(/firefox|fxios/i)){
                browserName = "firefox";
            }  else if(userAgent.match(/safari/i)){
                browserName = "safari";
            }else if(userAgent.match(/opr\//i)){
                browserName = "opera";
            } else if(userAgent.match(/edg/i)){
                browserName = "edge";
            } else {
                browserName="No browser detection";
            }

            return browserName
        },

        paths: {
            app: '<%= sk.routes.frontend.app %>',
            view: '<%= sk.routes.frontend.view %>',
            global: '<%= sk.routes.frontend.global %>',
            icon: '<%= sk.routes.icon %>',
        },

        id: '<%= id %>',
        title: '<%= title %>',

        actions: {},

        interactions: {
            block: ()=>{ sk.ums.broadcast('sk_ui_block_userInteractons', undefined, {block: true}) },
            unblock: ()=>{ sk.ums.broadcast('sk_ui_block_userInteractons', undefined, {block: false}) },
            getPos: _e => { return {x: (_e.clientX || _e.touches[0].clientX), y: (_e.clientY || _e.touches[0].clientY)} },
            getPosDiff: (_e, substractWith)=>{
                var diff = sk.interactions.getPos(_e)
                diff.x -= substractWith.x
                diff.y -= substractWith.y
                return diff
            }
        },

        comm: new SK_Comm(),
        dialog: new SK_Dialog(),

        //_cM: new ContextMenu(),

        toast: {
            do: (_msg, opt = {})=>{
                var defOpt = {
                    ...{
                        message: _msg,
                        class: opt.class,
                        position: opt.position || 'top center'
                    },

                    ...opt
                }
                $('body').toast(defOpt)
            },

            success : (msg, opt)=>{ sk.toast.do(msg, {...{class: 'success'}, ...opt}) },
            error   : (msg, opt)=>{ sk.toast.do(msg, {...{class: 'error'}  , ...opt}) },
            warning : (msg, opt)=>{ sk.toast.do(msg, {...{class: 'warning'}, ...opt}) }
        },

        openURL: url => {
            sk.comm.main('openURL', {url: url})
        },
        downloadURL: (url, filename, targetDir)=>{
            return new Promise((resolve, reject)=>{
                var fail = err => {
                    console.error(err)
                    reject()
                }


                var asWapp = ()=>{
                    //if (!filename) return fail('No filename set for download')

                    var xhr = new XMLHttpRequest()
                    xhr.open('GET', url, true)
                    xhr.responseType = 'blob'
                    xhr.onload = e => {
                        if (e.target.status === 200) {
                            var blob = e.target.response
                            var link = document.createElement('a')
                            link.href = window.URL.createObjectURL(blob)
                            
                            if (!filename){
                                var split = e.target.responseURL.split('/')
                                filename = split[split.length - 1]
                            }
                            
                            link.download = filename
                            link.click()
                            return resolve()
                        }

                        fail(e.target.statusText)
                    }
                    xhr.send()
                }

                

                var asDapp = ()=>{
                    asWapp()
                }

                if (sk.app_type === 'wapp') asWapp()
                else asDapp()
            })
        },

        urlParams: ()=>{
            const urlSearchParams = new URLSearchParams(window.location.search)
            return Object.fromEntries(urlSearchParams.entries())
        },

        init: ()=>{
            return new Promise(async (resolve, reject)=>{
                var res = await sk.comm.main('getInfo')
                if (!sk.isOnMobile) sk.os = res.os
                sk.arch    = res.arch
                sk.main    = res.main
                sk.noTitle = res.view.noTitle
                sk.version = res.version
                sk.window  = {...sk.window, ...res.view}


                /*************/

                var configureActions = actions => {
                    var configAction = action => {
                        sk.actions[action] = opt => { return sk.comm.view(action, opt) }
                    }

                    for (var i in actions) configAction(actions[i])
                }

                configureActions(res.actions)


                resolve()
            })
        },

        debugMode: activate => {
            var rndClr = ()=>{
                return '#' + [..."000000"].map(()=>Math.random().toString(16)[2]).join("")
            }

            function traverseChildren(component){
                var clr = rndClr()
                var id = 'sk_ui_id_' + component.uuid
                $('.' + id).css('border', (activate ? 'dashed 1px darkturquoise' : ''))

                for (var i = 0; i < component.children.length; i++){
                    traverseChildren(component.children[i])
                }
            }
            traverseChildren(sk.app.body)
            
        },

        utils: {
            sleep: (delay = 1000)=>{ return new Promise(resolve => { setTimeout(()=>{ resolve() }, delay)})},
            map: (value, aMin, aMax, bMin, bMax)=>{ return (value - aMin) * (bMax - bMin) / (aMax - aMin) + bMin },
            wrapNum: (val, max)=>{ return max >= 0 ? max % val : (max % val + val) % val},
            calcSnap: opt => {
                var defOpt = {...{gridSize: 32, func: 'round'}, ...opt}
                var step = defOpt.val / defOpt.gridSize
                return Math[defOpt.func](step) * defOpt.gridSize
            },
            
            rgb2hex: rgb => {
                try {
                    return `#${
                    rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/)
                    .slice(1)
                    .map(n => 
                        parseInt(n, 10)
                        .toString(16)
                        .padStart(2, '0'))
                        .join('')
                    }`
                } catch(err) { return }
            },

            formatSeconds: seconds => {
                var _s = seconds
                var timeUnit = (_s > 1 ? sk.l10n.getPhrase('seconds') : sk.l10n.getPhrase('second') )

                if (_s > 60){
                    _s = _s / 60
                    timeUnit = (_s > 1 ? sk.l10n.getPhrase('minutes') : sk.l10n.getPhrase('minute') )
                }
                
                var hourUnit = false
                if (_s > 60){
                    _s = _s / 60
                    timeUnit = (_s > 1 ? sk.l10n.getPhrase('hours') : sk.l10n.getPhrase('hour') )
                    hourUnit = true
                }
                

                return {
                    long: _s + ' ' + timeUnit,
                    short: _s + ' ' + (hourUnit ? timeUnit : timeUnit.substr(0,3))
                }
            },

            secondsToTimestamp: (_ms, noMilliseconds)=>{
                // Pad to 2 or 3 digits, default is 2
                function pad(n, z) {
                    z = z || 2;
                    return ('00' + n).slice(-z);
                }

                var ms = _ms * 1000

                var shours = Math.floor(ms / 1000 / 60 / 60)
                var sminutes = Math.floor(ms / 1000 / 60)
                var sseconds = Math.floor(ms / 1000)

                var rhours = shours;
                var rminutes = sminutes - (shours * 60);
                var rseconds = sseconds - (sminutes * 60 + shours * 60 * 60);

                var hourStr = ''
                if (rhours > 0) hourStr += pad(rhours) + ':'

                return hourStr + pad(rminutes) + ':' + pad(rseconds) + (!noMilliseconds ? '.' + pad(ms, 3) : '');
            },

            humanReadableTime: opt => {
                
                var result = ''

                var defOpt = {...{
                    include: ['hours', 'minutes', 'seconds'],
                    humanReadable: true
                }, ...opt}

                if (defOpt.humanReadable){
                    var h = defOpt.time.getHours()
                    var m = defOpt.time.getMinutes()
                    
                    const hours = h < 10 ? `0${h}` : `${h}`
                    const minutes = m < 10 ? `0${m}` : `${m}`
                    
                    var _time = `${hours}:${minutes}`

                    var diff = (Date.now() - defOpt.time.getTime())
                    var elapsedHours = Math.floor(diff / 1000 / 60 / 60)
                    if (elapsedHours < 24){
                        result = sk.l10n.getPhrase('today') + ' ' + _time
                    } else {
                        if (elapsedHours >= 48){ result = defOpt.time.toLocaleString() }
                        else {
                            if (elapsedHours >= 24) result = sk.l10n.getPhrase('yesterday') + ' ' + _time
                        }
                    }
                } else {
                    var time = opt.time.getTime()

                    const h = Math.floor(defOpt.time / 1000 / 60 / 60)
                    const m = Math.floor((defOpt.time / 1000 / 60 / 60 - h) * 60)
                    const s = Math.floor(((defOpt.time / 1000 / 60 / 60 - h) * 60 - m) * 60)

                    // To get time format 00:00:00
                    const seconds = s < 10 ? `0${s}` : `${s}`;
                    const minutes = m < 10 ? `0${m}` : `${m}`;
                    const hours = h < 10 ? `0${h}` : `${h}`;


                    var arr = []
                    if (defOpt.include.includes('hours')) arr.push(`${h}h`)
                    if (defOpt.include.includes('minutes')) arr.push(`${h}m`)
                    if (defOpt.include.includes('seconds')) arr.push(`${h}s`)

                    
                    result = arr.join(' ')
                }

                return result
            },

            bytesToFormat(size){
                var formatsList = []
                var highest = {size: size, format: 'B'}

                var addFormat = (size, format)=>{
                    highest = {size: size, format: format.toUpperCase() + 'B'}
                    formatsList.push(highest)
                }

                

                var formats = 'kmgtp'
                var divisionIdx = -1
                var divide = ()=>{
                    divisionIdx++
                    size = (size / 1000).toFixed(2)
                    addFormat(size, formats[divisionIdx])
                }

                var sizeStr = size.toString()
                var divisionSteps = Math.floor(sizeStr.length / 3)
                for (var i = 0; i < divisionSteps; i++) divide()

                var res = {size: highest.size, format: highest.format, formats: formatsList}

                return res
            },

            getDomPath(_el) {
                var path = []
                var getNext = el => {
                    path.push(el)
                    if (el === document.body) return
                    return getNext(el.parentNode)
                }

                getNext(_el)

                return path
            }
        },

        

        _view: SK_App_View,


        
    }

    sk.mobile = new SK_Mobile()

    sk.fileDrop = new sk_fileDrop()

    sk.window = {
        close    : async terminate => { sk.comm.main('windowAction', {action: 'close', terminate: terminate}) },
        minimize : ()=>{ sk.comm.main('windowAction', {action: 'minimize'}) },
        maximize : reset => {
            sk.window.resizing = true
            sk.comm.main('windowAction', {action: 'maximize', reset: reset})
            setTimeout(()=>{ sk.window.resizing = false }, 100)
        },
        
        reload: async ()=>{
            if (sk.app_type === 'dapp') await sk.comm.main('windowAction', {action: 'reload'})
            location.reload()
        }
    }

    sk.ui = {
        components: {
            uuid_counter: 0,

            lists: {
                core: {
                    <% for (var i = 0; i < sk.ui.components.core.length; i++){ %>
                        <%= sk.ui.components.core[i] %>: sk_ui_<%= sk.ui.components.core[i] %>,
                    <% } %>
                },

                shared: {
                    <% for (var i = 0; i < sk.ui.components.shared.length; i++){ %>
                        <%= sk.ui.components.shared[i] %>: sk_ui_<%= sk.ui.components.shared[i] %>,
                    <% } %>
                },

                view: {
                    <% for (var i = 0; i < sk.ui.components.view.length; i++){ %>
                        <%= sk.ui.components.view[i] %>: sk_ui_<%= sk.ui.components.view[i] %>,
                    <% } %>
                },

                global: {
                    <% for (var i = 0; i < sk.ui.components.global.length; i++){ %>
                        <%= sk.ui.components.global[i] %>: sk_ui_<%= sk.ui.components.global[i] %>,
                    <% } %>
                }
            }
        }
    }

    <% if (app_type === 'dapp'){ %>
        sk.views = {
            <% for (var i = 0; i < views.length; i++){ %>
                <%= views[i] %>: new SK_ViewController({view: '<%= views[i] %>'}),
            <% } %>
        }
    <% } %>
    
</script>